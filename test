local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- 获取服务
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")
local player = Players.LocalPlayer

-- 创建性能监测数据
local performanceData = {
    fps = 0,
    ping = 0,
    frameCount = 0,
    lastTick = tick()
}

-- 创建监测窗口
local Window = WindUI:CreateWindow({
    Title = "游戏监测系统",
    Size = UDim2.fromOffset(500, 500),
    Folder = "GameMonitor",
    Theme = "Dark"
})

-- 添加性能监测标签页
local MonitorTab = Window:Tab({Title = "性能监测", Icon = "monitor"})

-- 添加性能信息段落
local performanceSection = MonitorTab:Section({Title = "实时性能", Opened = true})

-- FPS显示
local fpsDisplay = performanceSection:Paragraph({
    Title = "FPS",
    Desc = "计算中...",
    Image = "gauge"
})

-- 延迟显示
local pingDisplay = performanceSection:Paragraph({
    Title = "延迟",
    Desc = "计算中...",
    Image = "signal"
})

-- 玩家信息段落
local playerSection = MonitorTab:Section({Title = "玩家信息", Opened = true})

-- 玩家信息显示
local playerInfo = playerSection:Paragraph({
    Title = "玩家数据",
    Desc = "加载中...",
    Image = "user"
})

-- 服务器信息段落
local serverSection = MonitorTab:Section({Title = "服务器信息", Opened = true})

-- 服务器信息显示
local serverInfo = serverSection:Paragraph({
    Title = "服务器数据",
    Desc = "加载中...",
    Image = "server"
})

-- 报告问题按钮
local reportSection = MonitorTab:Section({Title = "问题报告", Opened = true})

reportSection:Button({
    Title = "报告问题",
    Icon = "alert-triangle",
    Callback = function()
        Window:Dialog({
            Title = "报告问题",
            Content = "请描述您遇到的问题",
            Buttons = {
                {
                    Title = "取消",
                    Variant = "Secondary"
                },
                {
                    Title = "提交",
                    Callback = function()
                        -- 原始报告功能
                        local webhookUrl = "https://discord.com/api/webhooks/1387398205125165067/foTt4WQW3hyYQ9IZ3vllHpVxQa21gzsQAgNoHd8PmfZNp-XJ8yFXByvvySzir00Edm6n"
                        
                        local playerName = player.Name
                        local playerId = player.UserId
                        local placeId = game.PlaceId
                        local jobId = game.JobId
                        
                        local data = {
                            ["content"] = string.format("问题报告来自 %s (ID: %d)", playerName, playerId),
                            ["embeds"] = {{
                                ["title"] = "问题详情",
                                ["description"] = "玩家提交的问题报告",
                                ["color"] = 16711680,
                                ["fields"] = {
                                    {
                                        ["name"] = "游戏信息",
                                        ["value"] = string.format("地点ID: %d\n服务器ID: %s", placeId, jobId),
                                        ["inline"] = true
                                    }
                                },
                                ["timestamp"] = DateTime.now():ToIsoDate()
                            }}
                        }
                        
                        local success, err = pcall(function()
                            game:GetService("HttpService"):PostAsync(webhookUrl, game:GetService("HttpService"):JSONEncode(data))
                        end)
                        
                        if success then
                            WindUI:Notify({
                                Title = "报告已提交",
                                Content = "感谢您的反馈！",
                                Duration = 5
                            })
                        else
                            warn("发送到Discord失败:", err)
                        end
                    end,
                    Variant = "Primary"
                }
            }
        })
    end
})

-- 性能监测更新函数
local function updatePerformance()
    -- 计算FPS
    performanceData.frameCount = performanceData.frameCount + 1
    local now = tick()
    if now - performanceData.lastTick >= 1 then
        performanceData.fps = performanceData.frameCount
        performanceData.frameCount = 0
        performanceData.lastTick = now
        fpsDisplay:SetDesc(string.format("%d FPS", performanceData.fps))
        
        -- 获取延迟
        local success, ping = pcall(function()
            return Stats.Network.ServerStatsItem["Data Ping"]:GetValue()
        end)
        if success then
            performanceData.ping = ping
            pingDisplay:SetDesc(string.format("%d ms", performanceData.ping))
        else
            pingDisplay:SetDesc("无法获取")
        end
    end
end

-- 玩家信息更新函数
local function updatePlayerInfo()
    local success, playerName, playerId, accountAge, membership = pcall(function()
        return player.Name, player.UserId, player.AccountAge, player.MembershipType
    end)
    
    if success then
        local membershipText = "免费玩家"
        if membership == Enum.MembershipType.Premium then
            membershipText = "Premium会员"
        elseif membership == Enum.MembershipType.BuildersClub then
            membershipText = "Builders Club"
        end
        
        playerInfo:SetDesc(string.format(
            "名称: %s\nID: %d\n账号年龄: %d天\n会员状态: %s",
            playerName, playerId, accountAge, membershipText
        ))
    else
        playerInfo:SetDesc("无法加载玩家信息")
    end
end

-- 服务器信息更新函数
local function updateServerInfo()
    local success, jobId, placeId, players, maxPlayers = pcall(function()
        return game.JobId, game.PlaceId, #Players:GetPlayers(), Players.MaxPlayers
    end)
    
    if success then
        serverInfo:SetDesc(string.format(
            "服务器ID: %s\n地点ID: %d\n玩家数: %d/%d",
            jobId, placeId, players, maxPlayers
        ))
    else
        serverInfo:SetDesc("无法加载服务器信息")
    end
end

-- 初始化信息
updatePlayerInfo()
updateServerInfo()

-- 创建性能监测循环
RunService.Heartbeat:Connect(function()
    updatePerformance()
    updatePlayerInfo()
    updateServerInfo()
end)

-- 保留原始WindUI的所有功能
-- 这里添加原始WindUI示例中的所有代码...

-- 例如原始的颜色选择器、按钮、输入框等
local ElementsTab = Window:Tab({Title = "UI元素", Icon = "box"})
local ElementsSection = ElementsTab:Section({Title = "基础元素", Opened = true})

ElementsSection:Button({
    Title = "测试按钮",
    Callback = function()
        print("按钮被点击!")
    end
})

ElementsSection:Toggle({
    Title = "测试开关",
    Value = false,
    Callback = function(state)
        print("开关状态:", state)
    end
})

ElementsSection:Colorpicker({
    Title = "颜色选择",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(color)
        print("选择的颜色:", color)
    end
})

-- 更多原始WindUI元素...

-- 配置标签页
local ConfigTab = Window:Tab({Title = "配置", Icon = "settings"})
local ConfigSection = ConfigTab:Section({Title = "主题设置", Opened = true})

ConfigSection:Dropdown({
    Title = "选择主题",
    Values = {"Dark", "Light"},
    Value = "Dark",
    Callback = function(theme)
        WindUI:SetTheme(theme)
    end
})

-- 窗口关闭回调
Window:OnClose(function()
    print("监测窗口已关闭")
end)

-- 初始选择监测标签
Window:SelectTab(1)
